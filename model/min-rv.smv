
#define XLEN 8

#define least_one_extended(w) \
    (0h_00 < (w & 0h_FF) \
        ? (0h_00 < (w & 0h_0F) \
            ? (0h_00 < (w & 0h_03) \
                ? (0h_00 < (w & 0h_01) ? 0h_FF : 0h_FE) \
                : (0h_00 < (w & 0h_04) ? 0h_FC : 0h_F8) \
            ) \
            : (0h_00 < (w & 0h_30) \
                ? (0h_00 < (w & 0h_10) ? 0h_F0 : 0h_E0) \
                : (0h_00 < (w & 0h_40) ? 0h_C0 : 0h_80) \
            )) \
        : 0h_00)

#define clamp(v, l, h) (min(max((v), l), h))

MODULE main
    VAR
        priv : boolean;
        regs : array 0..3 of signed word[XLEN];
        regs_conf : array 0..3 of unsigned word[XLEN];
        memory : array 0..3 of signed word[XLEN];
        memory_conf : array 0..3 of unsigned word[XLEN];

    INIT priv = TRUE;

    IVAR
        op : {LOAD, STORE, LOADI, ADD, SUB, ECALL, MRET, SLT, SLL, SRA};
        rd : 0..3;
        rs1 : 0..3;
        rs2 : 0..3;

    -- privelege mode transitions
    TRANS next(priv) = case
        op = MRET: FALSE;
        op = ECALL: TRUE;
        TRUE: priv;
    esac;

    -- register transitions
    #define next_reg(i) \
        (case \
            rd != i: regs[i]; \
            op = LOAD: memory[rs1]; \
            op = ADD: regs[rs1] + regs[rs2]; \
            op = SUB: regs[rs1] - regs[rs2]; \
            op = SLT: regs[rs1] < regs[rs2] ? 0sh_01 : 0sh_00; \
            op = SLL: regs[rs1] << clamp(toint(regs[rs2]), 0, 8); \
            op = SRA: regs[rs1] >> clamp(toint(regs[rs2]), 0, 8); \
            TRUE: regs[i]; \
        esac)

    #define loadi_targeted(i) (rd = i & op = LOADI)
    TRANS loadi_targeted(0) | (next(regs)[0] = next_reg(0));
    TRANS loadi_targeted(1) | (next(regs)[1] = next_reg(1));
    TRANS loadi_targeted(2) | (next(regs)[2] = next_reg(2));
    TRANS loadi_targeted(3) | (next(regs)[3] = next_reg(3));

    -- Cast conf reg to signed on right shift for correct sign extension
    #define next_reg_conf(i) \
        (case \
            rd != i: regs_conf[i]; \
            op = LOAD: memory_conf[rs1]; \
            op = LOADI: unsigned(resize(signed(word1(priv)), 8)); \
            op = ADD: least_one_extended(regs_conf[rs1] | regs_conf[rs2]); \
            op = SUB: least_one_extended(regs_conf[rs1] | regs_conf[rs2]); \
            op = SLT: (0h_00 < regs_conf[rs1] | 0h_00 < regs_conf[rs2] ? 0h_01 : 0h_00); \
            op = SLL: regs_conf[rs1] << clamp(toint(regs[rs2]), 0, 8); \
            op = SLL: unsigned(signed(regs_conf[rs1]) >> clamp(toint(regs[rs2]), 0, 8)); \
            TRUE: regs_conf[i]; \
        esac)

    TRANS next(regs_conf)[0] = next_reg_conf(0);
    TRANS next(regs_conf)[1] = next_reg_conf(1);
    TRANS next(regs_conf)[2] = next_reg_conf(2);
    TRANS next(regs_conf)[3] = next_reg_conf(3);

    -- memory transitions
    #define store_targeted(i) (rd = i & op = STORE)
    TRANS next(memory)[0] = (store_targeted(0) ? regs[rs1] : memory[0]);
    TRANS next(memory)[1] = (store_targeted(1) ? regs[rs1] : memory[1]);
    TRANS next(memory)[2] = (store_targeted(2) ? regs[rs1] : memory[2]);
    TRANS next(memory)[3] = (store_targeted(3) ? regs[rs1] : memory[3]);

    TRANS next(memory_conf)[0] = (store_targeted(0) ? regs_conf[rs1] : memory_conf[0]);
    TRANS next(memory_conf)[1] = (store_targeted(1) ? regs_conf[rs1] : memory_conf[1]);
    TRANS next(memory_conf)[2] = (store_targeted(2) ? regs_conf[rs1] : memory_conf[2]);
    TRANS next(memory_conf)[3] = (store_targeted(3) ? regs_conf[rs1] : memory_conf[3]);

    LTLSPEC G (priv | (regs_conf[0] = 0h_00 & regs_conf[1] = 0h_00 & regs_conf[2] = 0h_00 & regs_conf[3] = 0h_00));
