
#define XLEN 8
#define REGION0_SIZE 2

#define least_one_extended(w) \
    (0h_00 < (w & 0h_FF) \
        ? (0h_00 < (w & 0h_0F) \
            ? (0h_00 < (w & 0h_03) \
                ? (0h_00 < (w & 0h_01) ? 0h_FF : 0h_FE) \
                : (0h_00 < (w & 0h_04) ? 0h_FC : 0h_F8) \
            ) \
            : (0h_00 < (w & 0h_30) \
                ? (0h_00 < (w & 0h_10) ? 0h_F0 : 0h_E0) \
                : (0h_00 < (w & 0h_40) ? 0h_C0 : 0h_80) \
            )) \
        : 0h_00)

#define clamp(v, l, h) (min(max((v), l), h))

MODULE pmpcfg_module(base_reg)
    DEFINE
        locked := bool(base_reg[3:3]);
        execute := bool(base_reg[2:2]);
        write := bool(base_reg[1:1]);
        read := bool(base_reg[0:0]);

MODULE main
    VAR
        priv : boolean;
        csrs : array 0..1 of unsigned word[XLEN];
        regs : array 0..3 of signed word[XLEN];
        regs_conf : array 0..3 of unsigned word[XLEN];
        regs_integrity : array 0..3 of unsigned word[XLEN];
        memory : array 0..3 of signed word[XLEN];
        memory_conf : array 0..3 of unsigned word[XLEN];
        memory_integrity : array 0..3 of unsigned word[XLEN];

    DEFINE
        __csrs_read_privs := [ 0h_FF, 0h_00 ];
        __csrs_write_privs := [ 0h_FF, 0h_FF ];
        __priv_vec := (priv ? 0h_FF : 0h_00);
        __csrs_conf := [ 0h_FF, 0h_00 ];
        __csrs_integrity := [ 0h_FF, 0h_FF ];
        mstatus := csrs[0];
        pmpcfg := csrs[1];
        __init_conf_leak := [ 0h_FF, 0h_FF, 0h_FF, 0h_FF ];
        __init_conf_influence := [ 0h_00, 0h_00, 0h_00, 0h_00 ];
        __mem_init_conf := [ 0h_FF, 0h_FF, 0h_00, 0h_00 ];
        __init_integrity_leak := [ 0h_FF, 0h_FF, 0h_FF, 0h_FF ];
        __init_integrity_influence := [ 0h_00, 0h_00, 0h_00, 0h_00 ];
        __mem_init_integrity := [ 0h_FF, 0h_FF, 0h_00, 0h_00 ];

    -- Initialize mstatus to have interrupts enable and nothing else
    INIT mstatus = 0b_00000110;
    --            0b_reg1_reg0

    DEFINE
        __mstatus_high_guard := 0b_00001000;
        __mstatus_low_guard := 0b_11110111;
        MPP := mstatus[0:0];
        MPIE := mstatus[1:1];
        MIE := mstatus[2:2] | word1(!priv);
        MEIP := mstatus[3:3];
        MSIP := mstatus[4:4];
        mscratch := mstatus[5:5];
        mcause := mstatus[7:6];

        do_trap := (op = ECALL) | (bool(MIE) & bool(MEIP | MSIP));

    VAR
        pmpcfg0 : pmpcfg_module(pmpcfg[3:0]);
        pmpcfg1 : pmpcfg_module(pmpcfg[7:4]);

    IVAR
        op : {
            LOAD, STORE, LOADI, ADD, SUB, ECALL, MRET, SLT, SLL, SRA, CSRRS,
            CSRRC, SAN, CLR
        };
        rd : 0..3;
        rs1 : 0..3;
        rs2 : 0..3;
        m_external_interrupt : unsigned word[1];
    DEFINE
        csr_rs := min(rs1, 1);

    DEFINE
        -- TODO: Throw on a load without privileges?
        can_load := (priv
            ? (rs1 < REGION0_SIZE
                ? (!pmpcfg0.locked | pmpcfg0.read)
                : (!pmpcfg1.locked | pmpcfg1.read)
            )
            : (rs1 < REGION0_SIZE
                ? pmpcfg0.read
                : pmpcfg1.read
            ));
        -- TODO: Throw on a write without privileges?
        can_write := (priv
            ? (rd < REGION0_SIZE
                ? (!pmpcfg0.locked | pmpcfg0.write)
                : (!pmpcfg1.locked | pmpcfg1.write)
            )
            : (rd < REGION0_SIZE
                ? pmpcfg0.write
                : pmpcfg1.write
            ));

    -- privelege mode transitions
    TRANS next(priv) = case
        do_trap: TRUE;
        op = MRET: bool(MPP);
        TRUE: priv;
    esac;

    -- mstatus
    -- Scale m_external_interrupt to a bitmask
    DEFINE
        csr_write_mask := __csrs_write_privs[csr_rs] -> __priv_vec;
        __meip_input := resize(m_external_interrupt, XLEN) << 3;
    TRANS next(mstatus) = (do_trap
        ? (case                     -- set mcause
                bool(MEIP): 0b_00;
                bool(MSIP): 0b_01;
                TRUE: 0b_10;        -- op = ECALL
            esac)
            :: mstatus[5:5]         -- preserve mscratch
            :: (MEIP & MSIP)        -- MSIP can only be taken if !MEIP
            :: 0b_00                -- MEIP := 0 and MIE := 0
            :: MIE                  -- MPIE := MIE
            :: word1(priv)          -- MPP := priv
        : __meip_input | case
            priv & op = MRET: mstatus[7:2] :: 0b_10;
            csr_rs != 0: mstatus;
            op = CSRRC: mstatus & (unsigned(regs[rs2]) | !csr_write_mask | __mstatus_high_guard);
            op = CSRRS: mstatus | (unsigned(regs[rs2]) & csr_write_mask & __mstatus_low_guard);
            -- on a trap return, set MPIE to 1 and MPP to user mode
            TRUE: mstatus;     -- do nothing on all others ops that do not trap
        esac);

    TRANS next(pmpcfg) = case
            do_trap | csr_rs != 1: pmpcfg;
            op = CSRRC: pmpcfg & (unsigned(regs[rs2]) | !csr_write_mask | (
                (pmpcfg1.locked ? 0h_F : 0h_0) :: (pmpcfg0.locked ? 0h_F : 0h_0)
            ));
            op = CSRRS: pmpcfg | (unsigned(regs[rs2]) & csr_write_mask & (
                (pmpcfg1.locked ? 0h_0 : 0h_F) :: (pmpcfg0.locked ? 0h_0 : 0h_F)
            ));
            TRUE: pmpcfg;
        esac;

    DEFINE
        csr_read_mask := __csrs_read_privs[csr_rs] -> __priv_vec;
    -- register transitions
    #define next_reg(i) \
        (case \
            rd != i | do_trap: regs[i]; \
            op = LOAD & can_load: memory[rs1]; \
            op = ADD: regs[rs1] + regs[rs2]; \
            op = SUB: regs[rs1] - regs[rs2]; \
            op = SLT: regs[rs1] < regs[rs2] ? 0sh_01 : 0sh_00; \
            op = SLL: regs[rs1] << clamp(toint(regs[rs2]), 0, XLEN); \
            op = SRA: regs[rs1] >> clamp(toint(regs[rs2]), 0, XLEN); \
            op = CSRRS | op = CSRRC: signed(csrs[csr_rs] & csr_read_mask); \
            TRUE: regs[i]; \
        esac)

    #define loadi_targeted(i) (rd = i & op = LOADI)
    TRANS loadi_targeted(0) | (next(regs)[0] = next_reg(0));
    TRANS loadi_targeted(1) | (next(regs)[1] = next_reg(1));
    TRANS loadi_targeted(2) | (next(regs)[2] = next_reg(2));
    TRANS loadi_targeted(3) | (next(regs)[3] = next_reg(3));

    -- Cast conf reg to signed on right shift for correct sign extension
    #define next_reg_conf(i) \
        (case \
            do_trap: regs_conf[i]; \
            op = CLR: 0h_00; \
            rd != i: regs_conf[i]; \
            op = LOAD & can_load: memory_conf[rs1]; \
            op = LOADI: unsigned(resize(signed(word1(priv)), XLEN)); \
            op = ADD: least_one_extended(regs_conf[rs1] | regs_conf[rs2]); \
            op = SUB: least_one_extended(regs_conf[rs1] | regs_conf[rs2]); \
            op = SLT: (0h_00 < regs_conf[rs1] | 0h_00 < regs_conf[rs2] ? 0h_01 : 0h_00); \
            op = SLL: regs_conf[rs1] << clamp(toint(regs[rs2]), 0, XLEN); \
            op = SRA: unsigned(signed(regs_conf[rs1]) >> clamp(toint(regs[rs2]), 0, XLEN)); \
            op = CSRRS | op = CSRRC: __csrs_conf[csr_rs] & csr_read_mask; \
            TRUE: regs_conf[i]; \
        esac)

    TRANS next(regs_conf)[0] = next_reg_conf(0);
    TRANS next(regs_conf)[1] = next_reg_conf(1);
    TRANS next(regs_conf)[2] = next_reg_conf(2);
    TRANS next(regs_conf)[3] = next_reg_conf(3);

    -- This pseudo-function casts a signed bitvector into an int in the range of
    -- [0, 8] by hand. Doing this with the macro clamp leads to a bug when used
    -- in a bit-shift, cf. https://essvn.fbk.eu/bugs/view.php?id=5410.
    #define clamp_buggy(w) (case \
        w < 0sd8_0: 0; \
        0sd8_8 <= w: 8; \
        TRUE: toint(resize(unsigned(w), 3)); \
    esac)

    #define next_reg_integrity(i) \
        (case \
            do_trap: regs_integrity[i]; \
            op = SAN: 0h_FF; \
            rd != i: regs_integrity[i]; \
            op = LOAD & can_load: memory_integrity[i]; \
            op = LOADI: (priv ? 0h_FF : 0h_00); \
            op = ADD: least_one_extended( \
                regs_integrity[rs1] & regs_integrity[rs2] \
            ); \
            op = SUB: least_one_extended( \
                regs_integrity[rs1] & regs_integrity[rs2] \
            ); \
            op = SLT: (priv ? 0h_FE : 0h_00) | ( \
                    0h_FF = (regs_integrity[rs1] & regs_integrity[rs2]) \
                        ? 0h_FF \
                        : 0h_00 \
                ); \
            op = SLL: ( \
                (priv ? 0h_FF : 0h_00) >> (XLEN - clamp_buggy(regs[rs2])) \
            ) | (regs_integrity[rs1] << clamp(toint(regs[rs2]), 0, XLEN)); \
            op = SRA: ( \
                (priv ? 0h_FF : 0h_00) << (XLEN - clamp_buggy(regs[rs2])) \
            ) | (regs_integrity[rs1] >> clamp(toint(regs[rs2]), 0, XLEN)); \
            op = CSRRS | op = CSRRC: __csrs_integrity[csr_rs] & csr_read_mask; \
            TRUE: regs_integrity[i]; \
        esac)

    TRANS next(regs_integrity)[0] = next_reg_integrity(0);
    TRANS next(regs_integrity)[1] = next_reg_integrity(1);
    TRANS next(regs_integrity)[2] = next_reg_integrity(2);
    TRANS next(regs_integrity)[3] = next_reg_integrity(3);

    -- memory transitions
    #define store_targeted(i) (rd = i & !do_trap & op = STORE & can_write)
    TRANS next(memory)[0] = (store_targeted(0) ? regs[rs1] : memory[0]);
    TRANS next(memory)[1] = (store_targeted(1) ? regs[rs1] : memory[1]);
    TRANS next(memory)[2] = (store_targeted(2) ? regs[rs1] : memory[2]);
    TRANS next(memory)[3] = (store_targeted(3) ? regs[rs1] : memory[3]);

    TRANS next(memory_conf)[0] = (store_targeted(0) ? regs_conf[rs1] : memory_conf[0]);
    TRANS next(memory_conf)[1] = (store_targeted(1) ? regs_conf[rs1] : memory_conf[1]);
    TRANS next(memory_conf)[2] = (store_targeted(2) ? regs_conf[rs1] : memory_conf[2]);
    TRANS next(memory_conf)[3] = (store_targeted(3) ? regs_conf[rs1] : memory_conf[3]);

    TRANS next(memory_integrity)[0] = (store_targeted(0)
        ? regs_integrity[rs1]
        : __mem_init_integrity[0]);
    TRANS next(memory_integrity)[1] = (store_targeted(1)
        ? regs_integrity[rs1]
        : __mem_init_integrity[1]);
    TRANS next(memory_integrity)[2] = (store_targeted(2)
        ? regs_integrity[rs1]
        : __mem_init_integrity[2]);
    TRANS next(memory_integrity)[3] = (store_targeted(3)
        ? regs_integrity[rs1]
        : __mem_init_integrity[3]);

    DEFINE
        leak_assumptions := priv = TRUE
            & pmpcfg = 0b_0111_0000
            & regs_conf = __init_conf_leak
            & memory_conf = __mem_init_conf
            & regs_integrity = __init_integrity_leak
            & memory_integrity = __mem_init_integrity;

    -- The following properties about information leakage are incremental:
    -- Confidential information can never leak into user mode
    LTLSPEC NAME NO_LEAK := leak_assumptions -> G (priv | (
        regs_conf[0] = 0h_00
        & regs_conf[1] = 0h_00
        & regs_conf[2] = 0h_00
        & regs_conf[3] = 0h_00
    ));
    -- ... if machine mode clears its registers before returning
    LTLSPEC NAME NO_LEAK_SANITIZED :=
        leak_assumptions
        & G (
            priv & op = MRET
            -> regs_conf[0] = 0h_00
                & regs_conf[1] = 0h_00
                & regs_conf[2] = 0h_00
                & regs_conf[3] = 0h_00
        )
        -> G (priv | (
            regs_conf[0] = 0h_00
            & regs_conf[1] = 0h_00
            & regs_conf[2] = 0h_00
            & regs_conf[3] = 0h_00
        ));
    -- ... and if machine mode does not write confidential information outside
    -- of memory region 0
    LTLSPEC NAME NO_LEAK_SANITIZED_NO_REGION1_STORE :=
            leak_assumptions
            & G (
                priv & op = STORE & 0h_00 < regs_conf[rs1]
                -> rd < REGION0_SIZE
            )
            & G (
                priv & op = MRET
                -> regs_conf[0] = 0h_00
                    & regs_conf[1] = 0h_00
                    & regs_conf[2] = 0h_00
                    & regs_conf[3] = 0h_00
            )
        -> G (priv | (
            regs_conf[0] = 0h_00
            & regs_conf[1] = 0h_00
            & regs_conf[2] = 0h_00
            & regs_conf[3] = 0h_00
        ));
    -- ... and if machine mode does not declassify memory regions that have
    -- confidential data in them
    LTLSPEC NAME NO_LEAK_SANITIZED_NO_MEM_DECLASSIFICATION :=
            leak_assumptions
            & G (
                priv & op in { CSRRS, CSRRC } & 0 < rs1
                ->
                    ((0h_00 = memory_conf[0] & 0h_00 = memory_conf[1])
                        | X !pmpcfg0.read)
                    & ((0h_00 = memory_conf[2] & 0h_00 = memory_conf[3])
                        | X !pmpcfg1.read)
                )
            & G (priv & op = STORE -> rd < REGION0_SIZE)
            & G (
                priv & op = MRET
                -> regs_conf[0] = 0h_00
                    & regs_conf[1] = 0h_00
                    & regs_conf[2] = 0h_00
                    & regs_conf[3] = 0h_00
            )
        -> G (priv | (
                regs_conf[0] = 0h_00
                & regs_conf[1] = 0h_00
                & regs_conf[2] = 0h_00
                & regs_conf[3] = 0h_00
            ));
    -- ... and if machine mode does not write into memory that is publicly readable
    LTLSPEC NAME NO_LEAK_SANITIZED_NO_USE_DECLASSIFIED_MEM :=
            leak_assumptions
            & G (
                priv & op in { CSRRS, CSRRC } & 0 < rs1
                ->
                    ((0h_00 = memory_conf[0] & 0h_00 = memory_conf[1])
                        | X !pmpcfg0.read)
                    & ((0h_00 = memory_conf[2] & 0h_00 = memory_conf[3])
                        | X !pmpcfg1.read)
            )
            & G (
                priv & op = STORE & 0h_00 < regs_conf[rs1]
                -> (rd < REGION0_SIZE ? !pmpcfg0.read : !pmpcfg1.read)
            )
            & G (
                priv & op = MRET
                -> regs_conf[0] = 0h_00
                    & regs_conf[1] = 0h_00
                    & regs_conf[2] = 0h_00
                    & regs_conf[3] = 0h_00
            )
        -> G (priv | (
            regs_conf[0] = 0h_00
            & regs_conf[1] = 0h_00
            & regs_conf[2] = 0h_00
            & regs_conf[3] = 0h_00
        ));

    DEFINE
        influence_assumptions := priv = FALSE
            & pmpcfg = 0b_0111_0000
            & regs_conf = __init_conf_influence
            & memory_conf = __mem_init_conf
            & regs_integrity = __init_integrity_influence
            & memory_integrity = __mem_init_integrity;

    -- Control and status registers are only written with machine-mode
    -- controlled values
    LTLSPEC NAME NO_INFLUENCE :=
        influence_assumptions
        -> G (
            priv & op in { CSRRS, CSRRC }
            -> regs_integrity[rs2] = 0h_FF
        );
