
$# Set up global variables
$py(
import math

# Word length of the architecture
XLEN=8
# Size (in words) of the first memory region; it ranges from addresses 0 to
# REGION0_SIZE - 1. In total, there are two memory regions. The second one
# ranges from REGION0_SIZE to MEM_SIZE - 1.
REGION0_SIZE=2
# Number of registers available
REG_NUM=4
# Size of memory
MEM_SIZE=4
# Size of addresses
MEM_ADDR_LEN=int(math.log(MEM_SIZE, 2))
)

$# Available extensions; extensions alter the behavior of the model. They are
$# completely implemented by the preprocessor. For a detailed description, what
$# each of them does, confer the pyexpander directives that reference the
$# respective variable.
$default(
    SP_AUTOBANK=False,                  # switch SP by hardware
    CACHE_VULN=False,                   # cache poisoning vulnerability
    SP_ENABLE=False,                    # enable SP
    MPRV=False,                         # privilege checks as if MPRV in RISC-V is set
    CACHE_INVALIDATE_ON_TRANS=False,    # cache gets invalidate on privilege mode transition
)

$# Available assumptions; these are handled by the preprocessor as well. The
$# preprocessor computes a conjunction of all assumptions that are set to true
$# plus a final TRUE as a guard when no assumptions are true. All assumptions
$# must close with a & for the concatenation to work.
$default(
    SP_SAFETY=False,
    SP_BANK=False,
    CLR_ON_RET=False,
    SAN_ON_CALL=False,
    NO_PUBLIC_READS=False,
    NO_PUBLIC_WRITES=False,
    CLR_ON_DECLASSIFICATION=False,
    CLR_CACHE_ON_DECLASSIFICATION=False,
    SAN_ON_CLASSIFICATION=False,
    SAN_CACHE_ON_CLASSIFICATION=False
)

-- Extend the first one we can find
$macro(extend_sup_conf, w)
    (0h_00 < (($w) & 0h_FF)\
        ? (0h_00 < (($w) & 0h_0F)\
            ? (0h_00 < (($w) & 0h_03)\
                ? (0h_00 < (($w) & 0h_01) ? 0h_FF : 0h_FE)\
                : (0h_00 < (($w) & 0h_04) ? 0h_FC : 0h_F8)\
            )\
            : (0h_00 < (($w) & 0h_30)\
                ? (0h_00 < (($w) & 0h_10) ? 0h_F0 : 0h_E0)\
                : (0h_00 < (($w) & 0h_40) ? 0h_C0 : 0h_80)\
            ))\
        : 0h_00)\
$endmacro

-- Extend the first zero we can find
$macro(extend_sup_integrity, w)
    (($w) < 0h_FF\
        ? (($w) < (($w) | 0h_0F)\
            ? (($w) < (($w) | 0h_03)\
                ? (($w) < (($w) | 0h_01) ? 0h_00 : 0h_01)\
                : (($w) < (($w) | 0h_04) ? 0h_03 : 0h_07)\
            )\
            : (($w) < (($w) | 0h_30)\
                ? (($w) < (($w) | 0h_10) ? 0h_0F : 0h_1F)\
                : (($w) < (($w) | 0h_40) ? 0h_3F : 0h_7F)\
            ))\
        : 0h_FF)\
$endmacro

-- constrain a value v to fall in the range [l, h]
$macro(clamp, v, l, h)
    (min(max(($v), $l), $h))\
$endmacro
-- Calculate a memory address from some register given by `source`
$macro(read_addr, source)
    (toint(unsigned(regs[$source])) mod $MEM_SIZE)\
$endmacro
-- Check if a memory address given by `source` can be read in the current state
$macro(can_load, source)
    (priv
    $if(MPRV)
        & MPP = 0b_1
    $endif
        ? ($source < $REGION0_SIZE
            ? (!pmpcfg0.locked | pmpcfg0.read)
            : (!pmpcfg1.locked | pmpcfg1.read)
        )
        : ($source < $REGION0_SIZE
            ? pmpcfg0.read
            : pmpcfg1.read
        ))
$endmacro
-- Check if a memory address given by `target` can be written to in the current
-- state
$macro(can_write, target)
    (priv
    $if(MPRV)
        & MPP = 0b_1
    $endif
        ? ($target < $REGION0_SIZE
            ? (!pmpcfg0.locked | pmpcfg0.write)
            : (!pmpcfg1.locked | pmpcfg1.write)
        )
        : ($target < $REGION0_SIZE
            ? pmpcfg0.write
            : pmpcfg1.write
        ))
$endmacro

MODULE cache_line(main_module)
    VAR
        -- Address the cache line points to
        addr : 0..$(MEM_SIZE - 1);
        -- Is the cache line valid?
        valid : boolean;
        -- Value of the cache line
        line : signed word[$XLEN];
        -- Confidentiality labels of the value
        conf : unsigned word[$XLEN];
        -- Integrity labels of the value
        integrity : unsigned word[$XLEN];

    DEFINE
        -- Variables "imported" from the main module
        __priv := main_module.priv;
        __op := main_module.op;
        __mem_addr := main_module.mem_addr;
        __rs2 := main_module.rs2;
        regs := main_module.regs;
        -- Is the memory region targeted by the cache line set to be uncached?
        __un := (addr < $REGION0_SIZE
            ? main_module.pmacfg0.uncached
            : main_module.pmacfg1.uncached);
        -- Does the current instruction target an uncached memory region?
        __target_un := (__mem_addr < $REGION0_SIZE
            ? main_module.pmacfg0.uncached
            : main_module.pmacfg1.uncached);
        -- Does the current instruction target a write-trough-cacheable region?
        __target_wt := (__mem_addr < $REGION0_SIZE
            ? main_module.pmacfg0.write_through
            : main_module.pmacfg1.write_through);
        -- Does the current instruction target a write-back-cacheable region?
        __target_wb := (__mem_addr < $REGION0_SIZE
            ? main_module.pmacfg0.write_back
            : main_module.pmacfg1.write_back);
        -- Does the current instruction target a write-protected-cacheable region?
        __target_wp := (__mem_addr < $REGION0_SIZE
            ? main_module.pmacfg0.write_protected
            : main_module.pmacfg1.write_protected);

        -- Does the current instruction target the cached memory address?
        __hit := __mem_addr = addr;
        -- Read the cache: either return its value or the respective memory
        -- address's value if either not hit or not valid.
        __read := (__hit & valid ? line : main_module.memory[__mem_addr]);
        __read_conf := (__hit & valid
            ? conf
            : main_module.memory_conf[__mem_addr]);
        __read_integrity := (__hit & valid
            ? integrity
            : main_module.memory_integrity[__mem_addr]);

        -- Should the cache be filled in this cycle because of a read?
        __read_fill_condition := __op = LOAD & !__target_un & (__target_wb -> !valid | !__hit)
            $if(not CACHE_VULN) & main_module.can_load $endif;
        -- Should the cache be filled in this cycle because of a write?
        __write_fill_condition := __op = STORE
            $if(not CACHE_VULN) & main_module.can_write $endif
            & (__target_wb | (__target_wt & __hit));

    TRANS next(valid) = case
        $if(CACHE_INVALIDATE_ON_TRANS)
            -- Invalidate cache on mode-transition
            __priv != next(__priv): FALSE;
        $endif
        -- Stable on trap
        main_module.do_trap: valid;
        -- Invalidate cache when cache gets disabled
        next(__un): FALSE;
        -- Set valid if filled
        __read_fill_condition | __write_fill_condition: TRUE;
        -- write invalidate condition
        __op = STORE & __target_wp
            $if(not CACHE_VULN) & main_module.can_write $endif: FALSE;
        -- Otherwise stable
        TRUE: valid;
    esac;

    TRANS next(addr) = case
        -- Stable on trap
        main_module.do_trap: addr;
        -- Update on fill
        __read_fill_condition | __write_fill_condition: __mem_addr;
        -- Otherwise stable
        TRUE: addr;
    esac;

    -- Value an label updates
    $for(var in ["line", "conf", "integrity"])
        $# All variables but line get their information flow labels from
        $# accordingly named sources
        $py(suffix=f"_{var}" if var != "line" else "")
        TRANS next($var) = case
            -- Stable on trap
            main_module.do_trap: $var;
            -- Read from memory on fill + read
            __read_fill_condition: main_module.memory${suffix}[__mem_addr];
            -- Read from register on fill + write
            __write_fill_condition: main_module.regs${suffix}[__rs2];
            -- Stable otherwise
            TRUE: $var;
        esac;
    $endfor

-- pmpcfg for one memory region
MODULE pmpcfg_module(base_reg)
    DEFINE
        -- Memory region is locked
        locked := bool(base_reg[3:3]);
        -- Memory region is executable to user-mode (not used)
        execute := bool(base_reg[2:2]);
        -- Memory region is writable to user-mode
        write := bool(base_reg[1:1]);
        -- Memory region is readable to user-mode
        read := bool(base_reg[0:0]);

-- pmacfg for one memory region
MODULE pmacfg_module(base_reg)
    DEFINE
        -- Memory region is uncacheable
        uncached := base_reg[1:0] = 0b_00;
        -- Memory region is write-trough-cacheable
        write_through := base_reg[1:0] = 0b_01;
        -- Memory region is write-back-cacheable
        write_back := base_reg[1:0] = 0b_10;
        -- Memory region is write-protected-cacheable
        write_protected := base_reg[1:0] = 0b_11;

-- The implementation of the MINRV8 architecture
MODULE main
    VAR
        -- Current privilege mode; TRUE encodes machine-, FALSE user-mode
        priv : boolean;
        csrs : array 0..1 of unsigned word[$XLEN];
        regs : array 0..$(REG_NUM - 1) of signed word[$XLEN];
        regs_conf : array 0..$(REG_NUM - 1) of unsigned word[$XLEN];
        regs_integrity : array 0..$(REG_NUM - 1) of unsigned word[$XLEN];
        memory : array 0..$(MEM_SIZE - 1) of signed word[$XLEN];
        memory_conf : array 0..$(MEM_SIZE - 1) of unsigned word[$XLEN];
        memory_integrity : array 0..$(MEM_SIZE - 1) of unsigned word[$XLEN];
        cache : cache_line(self);
        $if(SP_ENABLE)
            -- Currently active stack pointer
            sp_sel : 0..1;
            -- Stack pointer values
            sp : array 0..1 of 0..$(MEM_SIZE - 1);
        $endif

    DEFINE
        -- Bit-masks to set individual bits of csrs read- or writeable. Bit i
        -- of csr j is read-/writeable to mode x if (x -> mask[j][i]).
        __csrs_read_privs := [ 0h_0F, 0h_00 ];
        __csrs_write_privs := [ 0h_FF, 0h_FF ];
        -- Privilege mode enlarged to word-size
        __priv_vec := (priv ? 0h_FF : 0h_00);
        -- Constant confidentiality/integrity labels of the csrs
        __csrs_conf := [ 0h_0F, 0h_00 ];
        __csrs_integrity := [ 0h_FF, 0h_FF ];
        -- mstatus is the first csr
        mstatus := csrs[0];
        -- pmacfg is conded in the upper half of mstatus
        pmacfg := mstatus[7:4];
        -- pmpcfg is in the second csr
        pmpcfg := csrs[1];

    DEFINE
        -- These guards can be used to set individual bits of mstatus to be not
        -- writable by software. The high_guard is used with the CSRRC and the
        -- low_guard with the CSRRS instruction. Currently, only MEIP is set to
        -- be not writable by software.
        __mstatus_high_guard := 0b_00001000;
        __mstatus_low_guard := 0b_11110111;
        MPP := mstatus[0:0];
        MPIE := mstatus[1:1];
        MIE := mstatus[2:2] | word1(!priv);
        MEIP := mstatus[3:3];

        -- Is there a trap in the current cycle?
        do_trap := (op = ECALL) | (bool(MIE) & bool(MEIP));

    -- MIE = 1 means that we are *not* handling an exception; then MPP is set to
    -- 0; cf. RISC-V manual p.20.
    INIT MIE = 0b_1 -> MPP = 0b_0;

    VAR
        pmpcfg0 : pmpcfg_module(pmpcfg[3:0]);
        pmpcfg1 : pmpcfg_module(pmpcfg[7:4]);
        pmacfg0 : pmacfg_module(pmacfg[1:0]);
        pmacfg1 : pmacfg_module(pmacfg[3:2]);

    DEFINE
        __init_high := [ 0h_FF, 0h_FF, 0h_FF, 0h_FF ];
        __init_low := [ 0h_00, 0h_00, 0h_00, 0h_00 ];
    -- If architecture start in machine-mode, registers contain integrous data
    INIT priv -> regs_integrity = __init_high;
    -- If architecture starts in user-mode, registers do not contain
    -- confidential data
    INIT !priv -> regs_conf = __init_low;
    -- Initially, if memory region 0 is not readable by user-mode, it does not
    -- contain confidential data
    INIT pmpcfg0.read -> memory_conf[0] = 0h_00 & memory_conf[1] = 0h_00;
    -- Initially, if memory region 0 is only writable by machine-mode, it must
    -- not contain malicious data
    INIT !pmpcfg0.write -> memory_integrity[0] = 0h_FF & memory_integrity[1] = 0h_FF;
    -- Same for memory 1...
    INIT pmpcfg1.read -> memory_conf[2] = 0h_00 & memory_conf[3] = 0h_00;
    INIT !pmpcfg1.write -> memory_integrity[2] = 0h_FF & memory_integrity[3] = 0h_FF;
    -- Initially, the cache can only be valid if it targets a memory region that
    -- is cacheable
    INIT cache.valid -> (cache.addr < $REGION0_SIZE & !pmacfg0.uncached)
        | ($REGION0_SIZE <= cache.addr & !pmacfg1.uncached);
    -- Initially, if the cache is valid and targets a memory region that is not
    -- write-back cacheable, the content of the memory and cache must align
    INIT cache.valid
        & (
            (cache.addr < $REGION0_SIZE & !pmacfg0.write_back)
            | ($REGION0_SIZE <= cache.addr & !pmacfg1.write_back)
        ) -> cache.line = memory[cache.addr]
            & cache.conf = memory_conf[cache.addr]
            & cache.integrity = memory_integrity[cache.addr];
    -- Same restrictions as for labels of memory regions but for cache
    INIT
        pmpcfg0.read & cache.addr < $REGION0_SIZE & cache.valid
        -> cache.conf = 0h_00;
    INIT
        pmpcfg1.read & $REGION0_SIZE <= cache.addr & cache.valid
        -> cache.conf = 0h_00;
    INIT
        !pmpcfg0.write & cache.addr < $REGION0_SIZE & cache.valid
        -> cache.integrity = 0h_FF;
    INIT
        !pmpcfg1.write & $REGION0_SIZE <= cache.addr & cache.valid
        -> cache.integrity = 0h_FF;
    $if(SP_ENABLE and not SP_AUTOBANK)
        -- If the architecture starts in privileged mode, set the stack pointer
        -- to point to a safe memory region initially
        INIT priv -> (sp[sp_sel] < $REGION0_SIZE
            ? !pmpcfg0.write & !pmpcfg0.read
            : !pmpcfg1.write & !pmpcfg1.read);
    $endif
    $if(SP_ENABLE and SP_AUTOBANK)
        -- If, however, the hardware changes the stack pointer, sp[1] is
        -- associated with machine-mode and sp[0] with user-mode so select the
        -- appropriate one on startup.
        INIT priv <-> sp_sel = 1;
    $endif

    -- Stream of instructions; some of the arguments might be ignored
    -- - depending on the instruction itself.
    IVAR
        -- Instruction itself
        op : {
            $if(SP_ENABLE)
                SPSEL, SPSET, PUSH, POP,
            $endif
            LOAD, STORE, LOADI, ADD, SUB, AND, OR, MOV, SLT, SLL, SRA,
            ECALL, MRET, CSRRS, CSRRC
        };
        -- Destination register
        rd : 0..$(REG_NUM - 1);
        -- First source register
        rs1 : 0..$(REG_NUM - 1);
        -- Second source register
        rs2 : 0..$(REG_NUM - 1);
        -- Signal for a pending external interrupt
        m_external_interrupt : unsigned word[1];
    DEFINE
        csr_rs := rs1 mod 2;

    DEFINE
        mem_addr := $read_addr("rs1");
        can_load := $can_load("mem_addr");
        can_write := $can_write("mem_addr");
        $if(SP_ENABLE)
            can_load_sp := $can_load("sp[sp_sel]");
            can_write_sp := $can_write("sp[sp_sel]");
        $endif

    -- privelege mode transitions
    TRANS next(priv) = case
        do_trap: TRUE;
        op = MRET: bool(MPP);
        TRUE: priv;
    esac;

    $if(SP_ENABLE)
        TRANS next(sp_sel) = case
            $if(SP_AUTOBANK)
                -- Stack pointer is selected by hardware if SP_AUTOBANK is
                -- given
                next(!priv): 0;
                next(priv): 1;
            $else
                -- Stack pointer is selected by SPSEL
                do_trap | !priv: sp_sel;
                op = SPSEL: rs1 mod 2;
                TRUE: sp_sel;
            $endif
        esac;

        -- Stack pointer transitions for sp[0] and sp[1]
        $for(i in range(0, 2))
            TRANS next(sp)[$i] = case
                -- Stable on trap
                do_trap | $i != sp_sel: sp[$i];
                -- Machine-mode writes to stack pointer
                priv & op = SPSET: mem_addr;
                -- for PUSH and POP ensure that stack wraps around in region
                op = PUSH & can_write_sp: case
                    sp[$i] < $REGION0_SIZE: (sp[$i] + 1 = $REGION0_SIZE ? 0 : sp[$i] + 1);
                    TRUE: (sp[$i] + 1 = $MEM_SIZE ? $REGION0_SIZE : sp[$i] + 1);
                esac;
                op = POP & can_load_sp: case
                    sp[$i] < $REGION0_SIZE: (sp[$i] - 1 < 0 ? $REGION0_SIZE - 1 : sp[$i] - 1);
                    TRUE: (sp[$i] - 1 < $REGION0_SIZE ? $MEM_SIZE - 1 : sp[$i] - 1);
                esac;
                -- Stable otherwise
                TRUE: sp[$i];
            esac;
        $endfor
    $endif

    DEFINE
        csr_write_mask := __csrs_write_privs[csr_rs] -> __priv_vec;
        -- Scale m_external_interrupt to a bitmask and shift it such that
        -- m_external_interrupt is at the position for MEIP
        __meip_input := resize(m_external_interrupt, $XLEN) << 3;
    -- Always write mstatus with whether an external interrupt is pending and...
    TRANS next(mstatus) = (__meip_input | (do_trap
        -- ... if there is a trap, either by an external interrupt or by some
        -- other condition...
        ?   pmacfg                  -- preserve pmacfg
            :: 0b_00                -- MEIP := 0 and MIE := 0
            :: MIE                  -- MPIE := MIE
            :: word1(priv)          -- MPP := priv
        -- If no trap is being taken...
        : case
            -- On MRET, restore MIE from MPIE and write MPIE with 1 and MPP with
            -- 0, i.e. user-mode; rest is stable
            priv & op = MRET: mstatus[7:3] :: MPIE :: 0b_10;
            -- If mstatus is not being targeted by a CSR instruction, it is stable
            csr_rs != 0: mstatus;
            -- mstatus is being targeted by a CSR instruction: write it
            -- accordingly but only where it can be written given overall guards
            -- and the capabilities of the current privilege mode
            op = CSRRC: mstatus & (unsigned(regs[rs2]) | !csr_write_mask | __mstatus_high_guard);
            op = CSRRS: mstatus | (unsigned(regs[rs2]) & csr_write_mask & __mstatus_low_guard);
            -- Stable otherwise
            TRUE: mstatus;     -- do nothing on all others ops that do not trap
        esac));

    TRANS next(pmpcfg) = case
            -- Stable on a trap or if not targeted
            do_trap | csr_rs != 1: pmpcfg;
            -- Write to the register but only at the bits the current privilege
            -- mode has the capabilities for and if the respective memory region
            -- is not locked
            op = CSRRC: pmpcfg & (unsigned(regs[rs2]) | !csr_write_mask | (
                (pmpcfg1.locked ? 0h_F : 0h_0) :: (pmpcfg0.locked ? 0h_F : 0h_0)
            ));
            op = CSRRS: pmpcfg | (unsigned(regs[rs2]) & csr_write_mask & (
                (pmpcfg1.locked ? 0h_0 : 0h_F) :: (pmpcfg0.locked ? 0h_0 : 0h_F)
            ));
            -- Stable otherwise
            TRUE: pmpcfg;
        esac;

    DEFINE
        csr_read_mask := __csrs_read_privs[csr_rs] -> __priv_vec;

    -- register transitions as demanded by the instruction semantics detailled
    -- in the thesis
    $for(i in range(0, REG_NUM))
        -- next(regs)[$i] is unconstrained if the current instruction is LOADI
        -- and $i is the targeted register. This effectively leads to nuXmv
        -- choosing a random value for next(regs)[$i] which encodes the
        -- immediate value loaded.
        TRANS (rd = $i & op = LOADI & !do_trap)
            | (next(regs)[$i] = case
                -- Stable if not targeted or a trap occurs
                rd != $i | do_trap: regs[$i];
                -- Execute the respective instructions...
                $if(SP_ENABLE)
                    op = POP & can_load_sp: memory[sp[sp_sel]];
                $endif
                $if(CACHE_VULN)
                    -- When given the cache vulnerability the cache can be read
                    -- without sufficient privilege
                    op = LOAD & cache.__hit & cache.valid: cache.line;
                $endif
                op = LOAD & can_load: cache.__read;
                op = ADD: regs[rs1] + regs[rs2];
                op = SUB: regs[rs1] - regs[rs2];
                op = AND: regs[rs1] & regs[rs2];
                op = OR: regs[rs1] | regs[rs2];
                op = MOV: regs[rs1];
                op = SLT: regs[rs1] < regs[rs2] ? 0sh_01 : 0sh_00;
                op = SLL: regs[rs1] << $clamp("toint(regs[rs2])", 0, XLEN);
                op = SRA: regs[rs1] >> $clamp("toint(regs[rs2])", 0, XLEN);
                op = CSRRS | op = CSRRC: signed(csrs[csr_rs] & csr_read_mask);
                -- Stable otherwise
                TRUE: regs[$i];
            esac);
    $endfor

    -- Transitions for the confidentiality and integrity labels of the registers
    -- happen analogously to those of the ordinary registers.
    $for(i in range(0, REG_NUM))
        TRANS next(regs_conf)[$i] = case
            do_trap: regs_conf[$i];
            rd != $i: regs_conf[$i];
            $if(SP_ENABLE)
                op = POP & can_load_sp: memory_conf[next(sp)[sp_sel]];
            $endif
            $if(CACHE_VULN)
                -- When given the cache vulnerability the cache can be read
                -- without sufficient privilege
                op = LOAD & cache.__hit & cache.valid: cache.conf;
            $endif
            op = LOAD & can_load: cache.__read_conf;
            op = LOADI: unsigned(resize(signed(word1(priv)), $XLEN));
            op = ADD: $extend_sup_conf("regs_conf[rs1] | regs_conf[rs2]");
            op = SUB: $extend_sup_conf("regs_conf[rs1] | regs_conf[rs2]");
            op = AND | op = OR: regs_conf[rs1] | regs_conf[rs2];
            op = SLT: (0h_00 < regs_conf[rs1] | 0h_00 < regs_conf[rs2] ? 0h_01 : 0h_00);
            op = SLL: (
                regs_conf[rs1] << $clamp("toint(regs[rs2])", 0, XLEN)
            ) | (0h_FF = regs_conf[rs2] ? 0h_FF : 0h_00);
            -- Cast conf reg to signed on right shift for correct sign extension
            op = SRA: unsigned(
                signed(regs_conf[rs1]) >> $clamp("toint(regs[rs2])", 0, XLEN)
            ) | (0h_FF = regs_conf[rs2] ? 0h_FF : 0h_00);
            op = CSRRS | op = CSRRC: __csrs_conf[csr_rs] & csr_read_mask;
            TRUE: regs_conf[$i];
        esac;
    $endfor

    -- This pseudo-function casts a signed bitvector into an int in the range of
    -- [0, 8] by hand. Doing this with the macro clamp leads to a bug when used
    -- in a bit-shift, cf. https://essvn.fbk.eu/bugs/view.php?id=5410.
    $macro(clamp_buggy, w)
        (case\
            $w < 0sd8_0: 0;\
            0sd8_8 <= $w: 8;\
            TRUE: toint(resize(unsigned($w), 3));\
        esac)
    $endmacro

    $for(i in range(0, REG_NUM))
        TRANS next(regs_integrity)[$i] = case
            do_trap: regs_integrity[$i];
            rd != $i: regs_integrity[$i];
            $if(SP_ENABLE)
                op = POP & can_load_sp: memory_integrity[next(sp)[sp_sel]];
            $endif
            $if(CACHE_VULN)
                -- When given the cache vulnerability the cache can be read
                -- without sufficient privilege
                op = LOAD & cache.__hit & cache.valid: cache.integrity;
            $endif
            op = LOAD & can_load: cache.__read_integrity;
            op = LOADI: (priv ? 0h_FF : 0h_00);
            op = ADD: $extend_sup_integrity("regs_integrity[rs1] & regs_integrity[rs2]");
            op = SUB: $extend_sup_integrity("regs_integrity[rs1] & regs_integrity[rs2]");
            op = AND | op = OR: regs_integrity[rs1] & regs_integrity[rs2];
            op = SLT: (0h_FF = (regs_integrity[rs1] & regs_integrity[rs2])
                ? 0h_FF
                : 0h_FE
            );
            op = SLL: (
                ((priv ? 0h_FF : 0h_00) >> ($XLEN - $clamp_buggy("regs[rs2]")))
                | (regs_integrity[rs1] << $clamp("toint(regs[rs2])", 0, XLEN))
            ) & (0h_FF = regs_integrity[rs2] ? 0h_FF : 0h_00);
            op = SRA: (
                ((priv ? 0h_FF : 0h_00) << ($XLEN - $clamp_buggy("regs[rs2]")))
                | (regs_integrity[rs1] >> $clamp("toint(regs[rs2])", 0, XLEN))
            ) & (0h_FF = regs_integrity[rs2] ? 0h_FF : 0h_00);
            op = CSRRS | op = CSRRC: __csrs_integrity[csr_rs] & csr_read_mask;
            TRUE: regs_integrity[$i];
        esac;
    $endfor

    -- memory transitions
    $for(i in range(0, MEM_SIZE))
        $# Decide the region this memory cell is in
        $py(region=0 if i < REGION0_SIZE else 1)
        $for(suffix in ["", "_conf", "_integrity"])
            TRANS next(memory${suffix})[$i] = case
                do_trap: memory${suffix}[$i];
                $if(SP_ENABLE)
                    op = PUSH & can_write_sp & sp[sp_sel] = $i: regs${suffix}[rs1];
                $endif
                op = STORE & mem_addr = $i & can_write
                    & !pmacfg${region}.write_back: regs${suffix}[rs2];
                -- Persist cache writes to memory if cache address or attributes
                -- change
                cache.addr = $i & cache.valid & (
                    (next(cache.addr) != $i & pmacfg${region}.write_back)
                    | (pmacfg${region}.write_back
                        & !next(pmacfg${region}.write_back))
                $# By standard, use the cache.line attribute
                ): cache.$(suffix.strip("_") if suffix else "line");
                TRUE: memory${suffix}[$i];
            esac;
        $endfor
    $endfor

    -- Heart of the CSR_INTEGRITY property (for re-use)
    $macro(CSR_INTEGRITY)
        (
            priv & op in { CSRRS, CSRRC }
            -> regs_integrity[rs2] = 0h_FF
        )
    $endmacro

    -- Heart of the MEMORY_OP_INTEGRITY property (for re-use)
    $macro(MEMORY_OP_INTEGRITY)
        (
            priv & op in { LOAD, STORE }
            -> (regs_integrity[rs1] & 0h_03) = 0h_03
        )
    $endmacro

    -- Implement all assumptions as a macro; documentation is given in thesis
    $macro(assumptions)
        $if(CLR_ON_RET)
            G (
                priv & X !priv -> regs_conf[0] = 0h_00
                    & regs_conf[1] = 0h_00
                    & regs_conf[2] = 0h_00
                    & regs_conf[3] = 0h_00
            ) &
        $endif
        $if(SAN_ON_CALL)
            G (!priv & X priv -> X (
                (priv -> !(op in { LOAD, STORE, CSRRS, CSRRC $if(SP_ENABLE), PUSH $endif }))
                U (regs_integrity[0] = 0h_FF
                    & regs_integrity[1] = 0h_FF
                    & regs_integrity[2] = 0h_FF
                    & regs_integrity[3] = 0h_FF)
            )) &
        $endif
        $if(NO_PUBLIC_READS)
            G (priv & op = LOAD -> (
                mem_addr < $REGION0_SIZE ? !pmpcfg0.write : !pmpcfg1.write
            )) &
        $endif
        $if(NO_PUBLIC_WRITES)
            G (priv & op = STORE -> (
                mem_addr < $REGION0_SIZE ? !pmpcfg0.read : !pmpcfg1.read
            )) &
        $endif
        $if(CLR_ON_DECLASSIFICATION)
            G (!pmpcfg0.read & X pmpcfg0.read
                -> memory_conf[0] = 0h_00 & memory_conf[1] = 0h_00)
            & G (!pmpcfg1.read & X pmpcfg1.read
                -> memory_conf[2] = 0h_00 & memory_conf[3] = 0h_00) &
        $endif
        $if(CLR_CACHE_ON_DECLASSIFICATION)
            G (!pmpcfg0.read & X pmpcfg0.read
                    & cache.valid & cache.addr < $REGION0_SIZE
                -> cache.conf = 0h_00) &
            G (!pmpcfg1.read & X pmpcfg1.read
                    & cache.valid & $REGION0_SIZE <= cache.addr
                -> cache.conf = 0h_00) &
        $endif
        $if(SAN_ON_CLASSIFICATION)
            G (pmpcfg0.write & X !pmpcfg0.write
                -> memory_integrity[0] = 0h_FF & memory_integrity[1] = 0h_FF)
            & G (pmpcfg1.write & X !pmpcfg1.write
                -> memory_integrity[2] = 0h_FF & memory_integrity[3] = 0h_FF) &
        $endif
        $if(SAN_CACHE_ON_CLASSIFICATION)
            G (pmpcfg0.write & X !pmpcfg0.write
                    & cache.valid & cache.addr < $REGION0_SIZE
                -> cache.integrity = 0h_FF) &
            G (pmpcfg1.write & X !pmpcfg1.write
                    & cache.valid & $REGION0_SIZE <= cache.addr
                -> cache.integrity = 0h_FF) &
        $endif
        $if(SP_BANK and SP_ENABLE)
            -- Switch SP on call
            G (!priv & X priv -> X (
                (priv -> !(op in { PUSH, POP }))
                U ((op = MRET & MPP = 0b_0) | sp[sp_sel] < $REGION0_SIZE
                    ? !pmpcfg0.write & !pmpcfg0.read
                    : !pmpcfg1.write & !pmpcfg1.read)
            )) &
            -- Switch SP on return
            G (op = MRET -> (sp[sp_sel] < $REGION0_SIZE
                ? pmpcfg0.read & pmpcfg0.write
                : pmpcfg1.read & pmpcfg1.write)) &
            -- Don't use bad SP (I)
            G (priv & op = SPSEL & (sp[rs1 mod 2] < $REGION0_SIZE
                    ? pmpcfg0.write | pmpcfg0.read
                    : pmpcfg1.write | pmpcfg1.read)
                -> X (
                    (priv -> !(op in { PUSH, POP }))
                    U ((op = MRET & MPP = 0b_0) | sp[sp_sel] < $REGION0_SIZE
                        ? !pmpcfg0.write & !pmpcfg0.read
                        : !pmpcfg1.write & !pmpcfg1.read)
                )) &
            -- Don't use bad SP (II)
            G (priv & op = SPSET & (mem_addr < $REGION0_SIZE
                    ? pmpcfg0.write | pmpcfg0.read
                    : pmpcfg1.write | pmpcfg1.read)
                -> X (
                    (priv -> !(op in { PUSH, POP }))
                    U ((op = MRET & MPP = 0b_0) | sp[sp_sel] < $REGION0_SIZE
                        ? !pmpcfg0.write & !pmpcfg0.read
                        : !pmpcfg1.write & !pmpcfg1.read)
                )) &
        $endif
        $if(SP_SAFETY and SP_ENABLE)
            G (priv & op = MRET & MPP = 0b_0 -> MIE = 0b_0) &
        $endif
        $if(SP_AUTOBANK)
            G (op != SPSET & (sp[0] < $REGION0_SIZE
                    ? pmpcfg0.write & pmpcfg0.read
                    : pmpcfg1.write & pmpcfg1.read)
                & (sp[1] < $REGION0_SIZE
                    ? !pmpcfg0.write & !pmpcfg0.read
                    : !pmpcfg1.write & !pmpcfg1.read)) &
        $endif
        TRUE
    $endmacro

    -- This property is here to be targeted by the user to check whether the
    -- model is syntactically correct without starting expensive proofs.
    LTLSPEC NAME SYNTAX_CANARY := TRUE;

    -- Confidential information can never leak into user mode
    LTLSPEC NAME NO_LEAK := $assumptions() -> G (priv | (
        regs_conf[0] = 0h_00
        & regs_conf[1] = 0h_00
        & regs_conf[2] = 0h_00
        & regs_conf[3] = 0h_00
    ));

    -- Control and status registers are only written with integrous data
    LTLSPEC NAME CSR_INTEGRITY :=
        $assumptions() -> G $CSR_INTEGRITY();

    -- Memory operations are only performed with integrous target addresses
    LTLSPEC NAME MEMORY_OP_INTEGRITY :=
        $assumptions() -> G $MEMORY_OP_INTEGRITY();
