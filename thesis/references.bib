@inproceedings{Ferraiuolo17,
    author = {Ferraiuolo, Andrew and Xu, Rui and Zhang, Danfeng and Myers, Andrew C. and Suh, G. Edward},
    title = {Verification of a Practical Hardware Security Architecture Through Static Information Flow Analysis},
    booktitle = {Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems},
    series = {ASPLOS '17},
    year = {2017},
    isbn = {978-1-4503-4465-4},
    location = {Xi'an, China},
    pages = {555--568},
    numpages = {14},
    url = {http://doi.acm.org/10.1145/3037697.3037739},
    doi = {10.1145/3037697.3037739},
    acmid = {3037739},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {hardware security, information flow, trustzone},
}

@article{Komuravelli13,
  author = {Komuravelli, Anvesh and
               Gurfinkel, Arie and
               Chaki, Sagar and
               Clarke, Edmund M.},
  title = {Automatic Abstraction in SMT-Based Unbounded Software Model Checking},
  journal = {CoRR},
  volume = {abs/1306.1945},
  year = {2013},
  url = {http://arxiv.org/abs/1306.1945},
  archivePrefix = {arXiv},
  eprint = {1306.1945},
  timestamp = {Mon, 13 Aug 2018 16:47:54 +0200},
  biburl = {https://dblp.org/rec/bib/journals/corr/KomuravelliGCC13},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@manual{RiscVISA,
    title = {The RISC-V Instruction Set Manual, Volume I: User-Level ISA},
    version = {2.2},
    author = {Andrew Waterman and Krste Asanovi\'c},
    organization = {RISC-V Foundation},
    month = {May},
    year = {2017}
}

@manual{RiscVISAP,
    title = {The RISC-V Instruction Set Manual, Volume II: Privileged Architecture},
    version = {1.10},
    author = {Andrew Waterman and Krste Asanovi\'c},
    organization = {RISC-V Foundation},
    month = {May},
    year = {2017}
}

@inproceedings{Hoder11,
    title={$ \mu ${Z} - An Efficient Engine for Fixed Points with Constraints},
    author={Krystof Hoder and Nikolaj Bj{\o}rner and Leonardo Mendonça de Moura},
    booktitle={CAV},
    year={2011}
}

@techreport{RiscVISA-org,
    author={Andrew Waterman and Yunsup Lee and David A. Patterson and Krste Asanovic},
    title={The {RISC-V} Instruction Set Manual, {V}olume {I}: Base User-Level {ISA}},
    institution={EECS Department, University of California at Berkeley},
    number={UCB/EECS-2011-62},
    month={May},
    year={2011}
}

@article{Qian16,
    author = {Ge, Qian and Yarom, Yuval and Cock, David and Heiser, Gernot},
    year = {2016},
    month = {10},
    pages = {1-27},
    title = {A survey of microarchitectural timing attacks and countermeasures on contemporary hardware},
    volume = {8},
    journal = {Journal of Cryptographic Engineering},
    doi = {10.1007/s13389-016-0141-6}
}

@Article{Cimatti2000,
    author="Cimatti, Alessandro
    and Clarke, Edmund
    and Giunchiglia, Fausto
    and Roveri, Marco",
    title="NUSMV: a new symbolic model checker",
    journal="International Journal on Software Tools for Technology Transfer",
    year="2000",
    month="Mar",
    day="01",
    volume="2",
    number="4",
    pages="410--425",
    issn="1433-2779",
    doi="10.1007/s100090050046",
    url="https://doi.org/10.1007/s100090050046"
}

@inproceedings{Cavada14,
    author    = {Roberto Cavada and
        Alessandro Cimatti and
        Michele Dorigatti and
        Alberto Griggio and
        Alessandro Mariotti and
        Andrea Micheli and
        Sergio Mover and
        Marco Roveri and
        Stefano Tonetta},
    title     = {The nuXmv Symbolic Model Checker},
    booktitle = {CAV},
    year      = {2014},
    pages     = {334-342},
    ee        = {http://dx.doi.org/10.1007/978-3-319-08867-9_22},
    bibsource = {DBLP, http://dblp.uni-trier.de}
}

@manual{IntelSystemProgramming,
    title = {Intel\textsuperscript{\textregistered} 64 and IA-32 Architectures Software Developer's Manual Volume 3 (3A, 3B, 3C \& 3D): System Programming Guide},
    note = {Order Number: 325384-060US},
    organization = {Intel},
    month = {September},
    year = {2016}
}

@book{SpinManual,
    title = {The Spin Model Checker: Primer and Reference Manual},
    author = {Holzmann, Gerard J.},
    address = {Boston},
    publisher = {Addison-Wesley},
    year = {2004},
    isbn = {0-321-22862-6}
}

@book{Date00,
    title = {An Introduction to Database Systems},
    author = {Date, Chris J.},
    address = {Reading, Masschusetts},
    publisher = {Addison-Wesley},
    year = {2000},
    edition = {7},
    isbn = {0-201-38590-2}
}

@inproceedings{Moura08,
    author = {de Moura, Leonardo and Bjørner, Nikolaj},
    year = {2008},
    month = {04},
    pages = {337-340},
    title = {Z3: an efficient SMT solver},
    volume = {4963},
    journal = {Tools and Algorithms for the Construction and Analysis of Systems},
    doi = {10.1007/978-3-540-78800-3_24}
}

@InProceedings{Clark00,
    author={Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
    editor={Emerson, E. Allen and Sistla, Aravinda Prasad},
    title={Counterexample-Guided Abstraction Refinement },
    booktitle={Computer Aided Verification},
    year={2000},
    publisher={Springer Berlin Heidelberg},
    address={Berlin, Heidelberg},
    pages={154--169},
    abstract={We present an automatic iterative abstraction-refinement methodology in which the initial abstract model is generated by an automatic analysis of the control structures in the program to be verified. Abstract models may admit erroneous (or ``spurious'') counterexamples. We devise new symbolic techniques which analyze such counterexamples and refine the abstract model correspondingly. The refinement algorithm keeps the size of the abstract state space small due to the use of abstraction functions which distinguish many degrees of abstraction for each program variable. We describe an implementation of our methodology in NuSMV. Practical experiments including a large Fujitsu IP core design with about 500 latches and 10000 lines of SMV code confirm the effectiveness of our approach.},
    isbn={978-3-540-45047-4}
}

@Misc{Wojtczuk09,
    author = {Wojtczuk, Rafal and Rutkowska, Joanna},
    title = {Attacking SMM Memory via Intel CPU Cache Poisoning},
    year = {2009},
    month = {March},
    howpublished = {Online},
    url = {https://invisiblethingslab.com/resources/misc09/smm_cache_fun.pdf}
}

@Online{SYSRET-vuln,
    title = {{CVE}-2012-0217},
    year = {2012},
    url={https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0217},
    urldate={2019-09-16}
}

@Online{Dunlap19,
    author = {Dunlap, George},
    title = {The Intel SYSRET Privilege Escalation},
    year = {2012},
    month = {June},
    url = {https://xenproject.org/2012/06/13/the-intel-sysret-privilege-escalation/},
    organization = {Xen Project},
    urldate = {2019-09-17}
}

@Online{SYSRETFreeBSD,
    title = {FreeBSD-SA-12:04.sysret Security Advisory},
    organization = {The FreeBSD Project},
    year = {2012},
    month = {July},
    url={https://www.freebsd.org/security/advisories/FreeBSD-SA-12:04.sysret.asc},
    urldate={2019-09-17}
}

@Online{SYSRETDebian,
    title = {Debian Security Advisory DSA-2508-1 kfreebsd-8 -- privilege escalation},
    organization = {debian},
    year = {2012},
    month = {July},
    url={https://www.debian.org/security/2012/dsa-2508},
    urldate={2019-09-17}
}

@Online{SYSRETCert,
    title = {SYSRET 64-bit operating system privilege escalation vulnerability on Intel CPU hardware},
    subtitle = {Vulnerability Note VU\#649219},
    organization = {CERT Coordination Center},
    year = {2012},
    month = {July},
    url={https://www.kb.cert.org/vuls/id/649219/},
    urldate={2019-09-17}
}

@Online{SYSRETMicrosoft,
    title = {Microsoft Security Bulletin MS12-042 - Important},
    subtitle = {Vulnerabilities in Windows Kernel Could Allow Elevation of Privilege (2711167)},
    organization = {Microsoft Corporation},
    year = {2012},
    month = {July},
    url={https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2012/ms12-042},
    urldate={2019-09-17}
}

@book{Baier08,
    author = {Baier, Christel and Katoen, Joost-Pieter},
    title = {Principles of Model Checking},
    year = {2008},
    isbn = {978-0-262-02649-9},
    publisher = {The MIT Press},
    address = {Cambridge, Massachusetts},
}

@article{Reid17,
    author = {Reid, Alastair},
    title = {Who Guards the Guards? Formal Validation of the Arm V8-m Architecture Specification},
    journal = {Proceedings of the ACM on Programming Languages},
    volume = {1},
    number = {OOPSLA},
    month = {October},
    year = {2017},
    issn = {2475-1421},
    pages = {88:1-88:24},
    articleno = {88},
    numpages = {24},
    url = {http://doi.acm.org/10.1145/3133912},
    doi = {10.1145/3133912},
    acmid = {3133912},
    publisher = {ACM},
    address = {New York, NY, USA},
}

@manual{Armv8,
    title = {Arm Architecture Reference Manual},
    subtitle= {Armv8, for Armv8-A architecture profile},
    year = {2019},
    organization = {Arm Limited},
    version = {E.a},
}

@manual{MIPS,
    title = {MIPS Architecture For Programmers Volume I-A: Introduction to the MIPS64 Architecture},
    year = {2014},
    organization = {MIPS},
    version = {Revision 6.01},
}

@book{Hennessy12,
    title = {Computer Architecture: A Quantitative Approach},
    author = {Hennessy, John L. and Patterson, David A.},
    address = {Amsterdam},
    publisher = {Elsevier, Morgan Kaufmann},
    year = {2012},
    edition = {5},
    isbn = {978-0-12-383872-8},
}

@InProceedings{Nemati15,
    author = {Nemati, Hamed and Guanciale, Roberto and Dam, Mads},
    editor = {Italiano, Giuseppe F. and Margaria-Steffen, Tiziana and Pokorný, Jaroslav and Quisquater, Jean-Jacques and Wattenhofer, Roger},
    title = {Trustworthy Virtualization of the ARMv7 Memory Subsystem},
    booktitle = {SOFSEM 2015: Theory and Practice of Computer Science},
    year = {2015},
    publisher = {Springer Berlin Heidelberg},
    address = {Berlin, Heidelberg},
    pages = {578-589},
    abstract = {In order to host a general purpose operating system, hypervisors need to virtualize the CPU memory subsystem. This entails dynami- cally changing MMU resources, in particular the page tables, to allow a hosted OS to reconfigure its own memory. In this paper we present the verification of the isolation properties of a hypervisor design that uses direct paging. This virtualization approach allows to host commodity OSs without requiring either shadow data structures or specialized hardware support. Our verification targets a system consisting of a commodity CPU for embedded devices (ARMv7), a hypervisor and an untrusted guest running Linux.The verification involves three steps: (i) Formalization of an ARMv7 CPU that includes the MMU, (ii) Formalization of a system behavior that includes the hypervisor and the untrusted guest (iii) Verification of the isolation properties. Formalization and proof are done in the HOL4 theorem prover, thus allowing to re-use the existing HOL4 ARMv7 model developed in Cambridge.},
    isbn = {978-3-662-46078-8}
}

@InProceedings{Alkassar12,
    author = {Alkassar, Eyad and Cohen, Ernie and Kovalev, Mikhail and Paul, Wolfgang J.},
    editor = {Joshi, Rajeev and Müller, Peter and Podelski, Andreas},
    title = {Verification of TLB Virtualization Implemented in C},
    booktitle = {Verified Software: Theories, Tools, Experiments},
    year = {2012},
    publisher = {Springer Berlin Heidelberg},
    address = {Berlin, Heidelberg},
    pages = {209-224},
    abstract = {Efficient TLB virtualization is a core component of modern hypervisors. Verifying such code is challenging; the code races with TLB virtualization code in other processors, with other guest threads, and with the hardware TLBs, and implements an abstract TLB that races with other abstract TLBs and guest threads. We give a general methodology for verifying virtual device implementations, and demonstrate the verification of TLB virtualization code (using shadow page tables) in the concurrent C verifier VCC. To our knowledge, this is the first verification of any kind against a realistic model of a modern hardware MMU.},
    isbn = {978-3-642-27705-4}
}

@inproceedings{Mukherjee16,
    author = {Mukherjee, Rajdeep and Schrammel, Peter and Kroening, Daniel and Melham, Tom},
    title = {Unbounded Safety Verification for Hardware Using Software Analyzers},
    booktitle = {Proceedings of the 2016 Conference on Design, Automation \& Test in Europe},
    series = {DATE '16},
    year = {2016},
    isbn = {978-3-9815370-6-2},
    location = {Dresden, Germany},
    pages = {1152-1155},
    numpages = {4},
    url = {http://dl.acm.org/citation.cfm?id=2971808.2972077},
    acmid = {2972077},
    publisher = {EDA Consortium},
    address = {San Jose, CA, USA},
}

@Article{Zhang15,
    author={J. {Zhang} and F. {Yuan} and L. {Wei} and Y. {Liu} and Q. {Xu}},
    journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
    title={VeriTrust: Verification for Hardware Trust},
    year={2015},
    volume={34},
    number={7},
    pages={1148-1161},
    doi={10.1109/TCAD.2015.2422836},
    month={July},
}

@inproceedings{Berezin98,
    author = {Berezin, Sergey and Biere, Armin and Clarke, Edmund M. and Zhu, Yunshan},
    title = {Combining Symbolic Model Checking with Uninterpreted Functions for Out-of-Order Processor Verification},
    booktitle = {Proceedings of the Second International Conference on Formal Methods in Computer-Aided Design},
    series = {FMCAD '98},
    year = {1998},
    isbn = {3-540-65191-8},
    pages = {369--386},
    numpages = {18},
    url = {http://dl.acm.org/citation.cfm?id=646185.683063},
    acmid = {683063},
    publisher = {Springer-Verlag},
    address = {London, UK},
}

@ARTICLE{Trippel19,
    author={C. {Trippel} and D. {Lustig} and M. {Martonosi}},
    journal={IEEE Micro},
    title={Security Verification via Automatic Hardware-Aware Exploit Synthesis: The CheckMate Approach},
    year={2019},
    volume={39},
    number={3},
    pages={84-93},
    doi={10.1109/MM.2019.2910010},
}

@InProceedings{Reid16,
    author={Reid, Alastair and Chen, Rick and Deligiannis, Anastasios and Gilday, David and Hoyes, David and Keen, Will and Pathirane, Ashan and Shepherd, Owen and Vrabel, Peter and Zaidi, Ali},
    editor={Chaudhuri, Swarat and Farzan, Azadeh},
    title={End-to-End Verification of Processors with ISA-Formal},
    booktitle={Computer Aided Verification},
    year={2016},
    publisher={Springer International Publishing},
    address={Cham},
    pages={42-58},
    abstract={Despite 20+ years of research on processor verification, it remains hard to use formal verification techniques in commercial processor development. There are two significant factors: scaling issues and return on investment. The scaling issues include the size of modern processor specifications, the size/complexity of processor designs, the size of design/verification teams and the (non)availability of enough formal verification experts. The return on investment issues include the need to start catching bugs early in development, the need to continue catching bugs throughout development, and the need to be able to reuse verification IP, tools and techniques across a wide range of design styles.},
    isbn={978-3-319-41540-6}
}

@InProceedings{Burch94,
    author={Burch, Jerry R. and Dill, David L.},
    editor={Dill, David L.},
    title={Automatic verification of pipelined microprocessor control},
    booktitle={Computer Aided Verification},
    year={1994},
    publisher={Springer Berlin Heidelberg},
    address={Berlin, Heidelberg},
    pages={68-80},
    abstract={We describe a technique for verifying the control logic of pipelined microprocessors. It handles more complicated designs, and requires less human intervention, than existing methods. The technique automatically compares a pipelined implementation to an architectural description. The CPU time needed for verification is independent of the data path width, the register file size, and the number of ALU operations. Debugging information is automatically produced for incorrect processor designs. Much of the power of the method results from an efficient validity checker for a logic of uninterpreted functions with equality. Empirical results include the verification of a pipelined implementation of a subset of the DLX architecture.},
    isbn={978-3-540-48469-1}
}

@INPROCEEDINGS{Beatty94,
    author={D. L. {Beatty} and R. E. {Bryant}},
    booktitle={31st Design Automation Conference},
    title={Formally Verifying a Microprocessor Using a Simulation Methodology},
    year={1994},
    volume={},
    number={},
    pages={596-602},
    keywords={Microprocessors;Switches;Circuit simulation;Registers;Switching circuits;Formal verification;Pipeline processing;Circuit testing;Laboratories;Timing},
    doi={10.1145/196244.196575},
    ISSN={},
    month={June},
}

@book{Patterson13,
 author = {Patterson, David A. and Hennessy, John L.},
 title = {Computer Organization and Design: The Hardware/Software Interface},
 year = {2013},
 isbn = {9780124077263},
 edition = {5},
 publisher = {Morgan Kaufmann Publishers Inc.},
 address = {San Francisco, CA, USA},
}

@inproceedings{Klein09,
    author = {Klein, Gerwin and Elphinstone, Kevin and Heiser, Gernot and Andronick, June and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and Sewell, Thomas and Tuch, Harvey and Winwood, Simon},
    title = {seL4: Formal Verification of an OS Kernel},
    booktitle = {Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles},
    series = {SOSP '09},
    year = {2009},
    isbn = {978-1-60558-752-3},
    location = {Big Sky, Montana, USA},
    pages = {207-220},
    numpages = {14},
    url = {http://doi.acm.org/10.1145/1629575.1629596},
    doi = {10.1145/1629575.1629596},
    acmid = {1629596},
    publisher = {ACM},
    address = {New York, NY, USA},
}

@InProceedings{Vaynberg12,
    author={Vaynberg, Alexander and Shao, Zhong},
    editor={Hawblitzel, Chris and Miller, Dale},
    title={Compositional Verification of a Baby Virtual Memory Manager},
    booktitle={Certified Programs and Proofs},
    year={2012},
    publisher={Springer Berlin Heidelberg},
    address={Berlin, Heidelberg},
    pages={143-159},
    isbn={978-3-642-35308-6}
}

@InProceedings{Dalinger05,
    author={Dalinger, Iakov and Hillebrand, Mark and Paul, Wolfgang},
    editor={Borrione, Dominique and Paul, Wolfgang},
    title={On the Verification of Memory Management Mechanisms},
    booktitle={Correct Hardware Design and Verification Methods},
    year={2005},
    publisher={Springer Berlin Heidelberg},
    address={Berlin, Heidelberg},
    pages={301--316},
    isbn={978-3-540-32030-2}
}

@article{Burch92,
    title = {Symbolic model checking: $10^{20}$ States and beyond},
    journal = {Information and Computation},
    volume = {98},
    number = {2},
    pages = {142 - 170},
    year = {1992},
    issn = {0890-5401},
    doi = {https://doi.org/10.1016/0890-5401(92)90017-A},
    url = {http://www.sciencedirect.com/science/article/pii/089054019290017A},
    author = {Burch, J. R. and Clarke, E. M. and McMillan, K. L. and Dill, D. L. and Hwang, L. J.},
    abstract = {Many different methods have been devised for automatically verifying finite state systems by examining state-graph models of system behavior. These methods all depend on decision procedures that explicitly represent the state space using a list or a table that grows in proportion to the number of states. We describe a general method that represents the state space symbolically instead of explicitly. The generality of our method comes from using a dialect of the Mu-Calculus as the primary specification language. We describe a model checking algorithm for Mu-Calculus formulas that uses Bryant's Binary Decision Diagrans (Bryant, R. E., 1986, IEEE Trans. Comput.C-35) to represent relations and formulas. We then show how our new Mu-Calculus model checking algorithm can be used to derive efficient decision procedures for CTL model checking, satisfiability of linear-time temporal logic formulas, strong and weak observational equivalence of finite transition systems, and language containment for finite ω-automata. The fixed point computations for each decision procedure are sometimes complex, but can be concisely expressed in the Mu-Calculus. We illustrate the practicality of our approach to symbolic model checking by discussing how it can be used to verify a simple synchronous pipeline circuit.}
}

@article{Foster05,
    author = {Foster, Harry and Marschner, Erich and Wolfsthal, Yaron},
    year = {2005},
    title = {IEEE 1850 PSL: The next generation}
}

@manual{nuXmv,
    title = {nuXmv User Manual},
    version = {1.1.1},
    author = {Bozzano, Marco and Cavada, Roberto and Cimatti, Allesandro and Dorigatti, Michele and Griggio, Alberto and Mariotti, Allessando and Micheli, Andrea and Mover, Sergio and Roveri, Marco and Tonetta, Stefano},
    organization = {Fondazione Bruno Kessler},
    year = {2016}
}

@INPROCEEDINGS{Claessen12,
    author = {Claessen, K. and Sörensson, N.},
    booktitle = {2012 Formal Methods in Computer-Aided Design (FMCAD)},
    title = {A liveness checking algorithm that counts},
    year = {2012},
    pages = {52-59},
    month = {October},
}

@InProceedings{Bradley11,
    author = {Bradley, Aaron R.},
    editor = {Jhala, Ranjit and Schmidt, David},
    title = {SAT-Based Model Checking without Unrolling},
    booktitle = {Verification, Model Checking, and Abstract Interpretation},
    year = {2011},
    publisher = {Springer Berlin Heidelberg},
    address = {Berlin, Heidelberg},
    pages = {70--87},
    abstract = {A new form of SAT-based symbolic model checking is described. Instead of unrolling the transition relation, it incrementally generates clauses that are inductive relative to (and augment) stepwise approximate reachability information. In this way, the algorithm gradually refines the property, eventually producing either an inductive strengthening of the property or a counterexample trace. Our experimental studies show that induction is a powerful tool for generalizing the unreachability of given error states: it can refine away many states at once, and it is effective at focusing the proof search on aspects of the transition system relevant to the property. Furthermore, the incremental structure of the algorithm lends itself to a parallel implementation.},
    isbn = {978-3-642-18275-4}
}

@incollection{Dijkstra72,
 author = {Dijkstra, Edsger W.},
 chapter = {Chapter I: Notes on Structured Programming},
 title = {Structured Programming},
 editor = {Dahl, O. J. and Dijkstra, E. W. and Hoare, C. A. R.},
 year = {1972},
 isbn = {0-12-200550-3},
 pages = {1--82},
 numpages = {82},
 url = {http://dl.acm.org/citation.cfm?id=1243380.1243381},
 acmid = {1243381},
 publisher = {Academic Press Ltd.},
 address = {London, UK, UK},
}

@Online{RISCV-formal,
    title = {RISC-V Formal Verification Framework},
    author = {Wolf, Clifford},
    url = {https://github.com/SymbioticEDA/riscv-formal},
    urldate = {2019-11-06},
}

@Online{Piano,
    title = {The Piano Test for Program Verification},
    author = {Regehr, John},
    date = {27 January 2011},
    url = {https://blog.regehr.org/archives/364},
    urldate = {2019-11-27},
}

@inproceedings{GordonKPGNR15,
  author    = {Michael I. Gordon and
               Deokhwan Kim and
               Jeff H. Perkins and
               Limei Gilham and
               Nguyen Nguyen and
               Martin C. Rinard},
  title     = {Information Flow Analysis of Android Applications in DroidSafe},
  booktitle = {{NDSS}},
  publisher = {The Internet Society},
  year      = {2015}
}

@inproceedings{SuhLZD04,
  author    = {G. Edward Suh and
               Jae W. Lee and
               David Zhang and
               Srinivas Devadas},
  title     = {Secure program execution via dynamic information flow tracking},
  booktitle = {{ASPLOS}},
  pages     = {85--96},
  publisher = {{ACM}},
  year      = {2004}
}

@techreport{Fox02,
    author = {Fox, A.C.J.},
    title = {Formal Verification of the ARM6 micro-architecture},
    institution = {University of Cambridge},
    number = {548},
    year = {2002},
}

@inproceedings{BradfieldS16,
  author    = {Chris Bradfield and
               Cynthia Sturton},
  title     = {Model checking to find vulnerabilities in an instruction set architecture},
  booktitle = {{HOST}},
  pages     = {109--113},
  publisher = {{IEEE} Computer Society},
  year      = {2016}
}

@inproceedings{Nienhuis19,
  title={Rigorous engineering for hardware security: formal modelling and proof in the CHERI design and implementation process},
  author={Kyndylan Nienhuis and Alexandre Joannou and Anthony Fox and Michael Roe and Thomas Bauerei{\ss} and Brian Campbell and Matthew Naylor and Robert M. Norton and Simon W. Moore and Peter G. Neumann and Ian David Bede Stark and Robert N. M. Watson and Peter Sewell},
  year={2019}
}

@inproceedings{KhakpourSD13,
  author    = {Narges Khakpour and
               Oliver Schwarz and
               Mads Dam},
  title     = {Machine Assisted Proof of ARMv7 Instruction Level Isolation Properties},
  booktitle = {{CPP}},
  series    = {Lecture Notes in Computer Science},
  volume    = {8307},
  pages     = {276--291},
  publisher = {Springer},
  year      = {2013}
}

@Online{pyexpander,
    title = {pyexpander documentation},
    year = {2017},
    organization = {Helmholtz-Zentrum Berlin GmbH},
    url = {http://pyexpander.sourceforge.net/},
    urldate = {2019-12-18},
}

@Online{RiscvSpecFormal,
    title = {Formal Specification of RISC-V ISA in Kami},
    organization = {SiFive},
    url = {https://github.com/sifive/RiscvSpecFormal},
    urldate = {2020-01-08},
}
